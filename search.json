[
  {
    "objectID": "veda-apis.html",
    "href": "veda-apis.html",
    "title": "VEDA Documentation",
    "section": "",
    "text": "The VEDA API source code is currently stored in a private repository: veda-backend, but is based off eoAPI.\nThe browser is based off https://github.com/radiantearth/stac-browser.\n\n\nWe recommend the following tools for working with STAC and VEDA datasets.\n\n\n\nfolium: folium adds Leaflet.js support to python projects for visualizing data in a map.\nholoviz: High-level tools that make it easier to apply Python plotting libraries to your data.\nipyleaflet: Interactive maps in the Jupyter notebook. ipyleaflet is built on ipywidgets allowing for bidirectional communication between front- and backends (learn more: Interactive GIS in Jupyter with ipyleaflet).\n\n\n\n\n\npystac: PySTAC is a library for creating SpatioTemporal Asset Catalogs (STAC) in Python 3.\npystac-client: A Python client for working with STAC Catalogs and APIs.\n\n\n\n\n\nrioxarray: rasterio xarray extension\nstackstac: stackstac.stack turns a STAC collection into a lazy xarray.DataArray, backed by dask.\n\n\n\n\n\n\n\n\n\n\n\nSTAC browser (experimental): delta-staging-stac-browser\nSTAC API (metadata): https://staging-stac.delta-backend.com/docs\nList collections: https://staging-stac.delta-backend.com/collections\nRaster API (tiling): https://staging-raster.delta-backend.com/docs\nSTAC viewer (experimental): https://staging-stac.delta-backend.com/index.html\n\n\n\n\n\nSTAC browser (experimental): delta-dev-stac-browser\nSTAC API (metadata): https://dev-stac.delta-backend.com/docs\nList collections: https://dev-stac.delta-backend.com/collections\nRaster API (tiling): https://dev-raster.delta-backend.com/docs\nSTAC viewer (experimental): https://dev-stac.delta-backend.com/index.html"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "VEDA Documentation",
    "section": "",
    "text": "This website provides documentation and example notebooks for the various APIs, datasets and analytics platforms maintained by NASA VEDA project. The intended audience is anyone who plans to use those backend systems."
  },
  {
    "objectID": "index.html#what-is-veda",
    "href": "index.html#what-is-veda",
    "title": "VEDA Documentation",
    "section": "What is VEDA?",
    "text": "What is VEDA?\nVEDA is NASA’s Visualization, Exploration, and Data Analysis (VEDA) project. It is an open-source science cyberinfrastructure for data processing, visualization, exploration, and geographic information systems (GIS) capabilities.\nLearn more at https://www.earthdata.nasa.gov/esds/veda."
  },
  {
    "objectID": "index.html#what-can-you-do-with-veda",
    "href": "index.html#what-can-you-do-with-veda",
    "title": "VEDA Documentation",
    "section": "What can you do with VEDA?",
    "text": "What can you do with VEDA?\nExplore: Available to anyone, you can visit the VEDA dashboard to explore data and stories developed by NASA scientific community at https://earthdata.nasa.gov/dashboard.\nAnalyze: Coming soon, anyone will be able to explore VEDA datasets and stories using a notebook environment. If you are a scientist affiliated with NASA projects such as EIS and MAAP you should have access to a notebook environment associated with those projects."
  },
  {
    "objectID": "index.html#whats-here",
    "href": "index.html#whats-here",
    "title": "VEDA Documentation",
    "section": "What’s here",
    "text": "What’s here\n\nDocumentation on VEDA datasets and APIs."
  },
  {
    "objectID": "index.html#whats-coming",
    "href": "index.html#whats-coming",
    "title": "VEDA Documentation",
    "section": "What’s coming",
    "text": "What’s coming\n\nDocumentation for scientists on how to get started with the analytics platforms."
  },
  {
    "objectID": "example-notebooks/hls-visualization.html",
    "href": "example-notebooks/hls-visualization.html",
    "title": "VEDA Documentation",
    "section": "",
    "text": "Author: Alexandra Kirk\nLast Updated Date: June 30, 2022\n\nThis notebook demonstrates how to explore HLS data for a specific event, where an event can be charactized by its time and place. Geospatial imagery, such as HLS, is often used for analysis of changes correlated with an event.\n\nIdentify available dates within a bounding box, which is also an area of interest (AOI) in this example, for a given collection\nRegister a dynamic tiler search for an AOI and specific date range for a given collection\nExplore different options for displaying multi-band Harmonized Landsat and Sentinel (HLS) assets with the Raster API.\n\nAbout the Data\nA small subset of HLS data has been ingested to the VEDA datastore to visually explore data using the Raster API, which is a VEDA instance of (pgstac-titiler). This limited subset includes a two granules for dates before and after Hurricane Maria in 2017 and Hurricane Ida in 2021.\nNote about HLS datasets: The Sentinel and Landsat assets have been “harmonized” in the sense that these products have been generated to use the same spatial resolution and grid system. Thus these 2 HLS S30 and L30 productscan be used interchangeably in algorithms. However, the individual band assets are specific to each provider. This notebook focuses on displaying HLS data with a dynamic tiler so separate examples are provided for rendering the unique band assets of each collection.\nAdditional Resources\nHLSL30 Dataset Landing Page\nLandsat 8 Bands and Combinations Blog\nHLSS30 Dataset Landing Page\nSentinel 2 Bands and Combinations Blog\nCQL2 STAC-API Examples\n\nimport json\nimport requests\nfrom folium import Map, TileLayer\n\n\n\nThe notebook examples below focus on HLS S30 data for Hurricane Ida, but Hurricane Maria and L30 parameters are provided below for further exploration.\n\n# Endpoints\nSTAC_API_URL = \"https://staging-stac.delta-backend.com\"\nRASTER_API_URL = \"https://staging-raster.delta-backend.com\" \n\n# Harmonized Sentinel collection id and configuration info\ns30_collection_id = \"hls-s30-002-ej-reprocessed\"\ns30_swir_assets = [\"B12\",\"B8A\",\"B04\"]\ns30_vegetation_index_assets = [\"B08\", \"B04\"]\ns30_vegetation_index_expression = \"(B08-B04)/(B08+B04)\"\ns30_vegetation_index_rescaling = \"0,1\"\ns30_vegetation_index_colormap = \"rdylgn\"\n\n# Harmonized Landsat collection id and map configuration info\nl30_collection_id = \"hls-l30-002-ej-reprocessed\"\nl30_swir_assets = [\"B07\",\"B05\",\"B04\"]\nl30_ndwi_expression = \"(B03-B05)/(B03+B05)\"\nl30_ndwi_assets = [\"B03\", \"B05\"]\nl30_ndwi_rescaling = \"0,1\"\nl30_ndwi_colormap = \"spectral\"\n\n# Search criteria for events in both HLS Events collections\nmaria_bbox = [-66.167596, 17.961538, -65.110098, 18.96772]\nmaria_temporal_range = [\"2017-06-06T00:00:00Z\", \"2017-11-30T00:00:00Z\"]\n\nida_bbox = [-90.932637, 29.705366, -89.766437, 30.71627]\nida_temporal_range = [\"2021-07-01T00:00:00Z\", \"2021-10-28T00:00:00Z\"]\n\n\n\nTo focus on a specific point in time, we will restrict the temporal range when defining the item search in the example below.\n\ncollections_filter = {\n    \"op\": \"=\", \n    \"args\" : [{ \"property\": \"collection\" }, s30_collection_id]\n}\n\nspatial_filter = {\n    \"op\": \"s_intersects\",\n    \"args\": [\n        {\"property\": \"bbox\"}, ida_bbox\n    ]\n}\n\ntemporal_filter = {\n    \"op\": \"t_intersects\",\n    \"args\": [\n        { \"property\": \"datetime\" },\n        { \"interval\" : ida_temporal_range }\n    ]\n}\n\n# Additional filters can be applied for other search criteria like <= maximum eo:cloud_cover in item properties\ncloud_filter = {\n    \"op\": \"<=\",\n    \"args\": [\n        {\"property\": \"eo:cloud_cover\"},\n        80\n    ]\n}\n\n# Specify cql2-json filter language in search body and add context for a summary of matched results\nsearch_body = {\n    \"filter-lang\": \"cql2-json\",\n    \"context\": \"on\",\n    \"filter\": {\n        \"op\": \"and\",\n        \"args\": [\n            collections_filter,\n            spatial_filter,\n            temporal_filter,\n            cloud_filter\n        ]\n    }\n}\n\n# Note this search body can also be used for a stac item search \nstac_items_response = requests.post(\n    f\"{STAC_API_URL}/search\",\n    json=search_body,\n).json()\n\n# Check how many items were matched in searc\nprint(\"search context:\", stac_items_response[\"context\"])\n\n# Iterate over search results to get an array of unique item datetimes\ndatetimes = []\nfeatures = stac_items_response[\"features\"]\ndatetimes += [item[\"properties\"][\"datetime\"] for item in features]\nnext_link = next((link for link in stac_items_response[\"links\"] if link[\"rel\"] == \"next\"), None)\nwhile next_link:\n    stac_items_response = requests.post(\n        f\"{STAC_API_URL}/search\",\n        json=next_link[\"body\"],\n    ).json()\n    features = stac_items_response[\"features\"]\n    datetimes += [item[\"properties\"][\"datetime\"] for item in features]\n    next_link = next((link for link in stac_items_response[\"links\"] if link[\"rel\"] == \"next\"), False)\n\nsorted(datetimes)\n\nsearch context: {'limit': 10, 'matched': 14, 'returned': 10}\n\n\n['2021-07-14T16:55:15.122720Z',\n '2021-07-24T16:55:15.112940Z',\n '2021-07-29T16:55:16.405890Z',\n '2021-08-08T16:55:15.798510Z',\n '2021-08-13T16:55:13.394950Z',\n '2021-08-23T16:55:11.785040Z',\n '2021-09-02T16:55:09.568600Z',\n '2021-09-07T16:55:13.430530Z',\n '2021-09-22T16:55:10.763010Z',\n '2021-09-27T16:55:17.027350Z',\n '2021-10-07T16:55:18.213640Z',\n '2021-10-12T16:55:14.209080Z',\n '2021-10-17T16:55:18.517600Z',\n '2021-10-22T16:55:14.670710Z']\n\n\n\n\n\n\nThe VEDA backend is based on eoAPI, an application for searching and tiling earth observation STAC records. The application uses titiler-pgstac for dynamically mosaicing cloud optimized data from a registerd STAC API search.\nTo use the dynamic tiler, register a STAC item search and then use the registered search ID to dynamically mosaic the search results on the map.\n\n\nThe registered search id can be reused for alternate map layer visualizations.\n\n# Restricted date range \nrestricted_temporal_filter = {\n    \"op\": \"t_intersects\",\n    \"args\": [\n        { \"property\": \"datetime\" },\n        { \"interval\" : [ \"2021-10-16T00:00:00Z\", \"2021-10-18T00:00:00Z\"] }\n    ]\n}\n\n# Specify cql2-json filter language in search body\nsearch_body = {\n    \"filter-lang\": \"cql2-json\",\n    \"filter\": {\n        \"op\": \"and\",\n        \"args\": [\n            collections_filter,\n            spatial_filter,\n            restricted_temporal_filter\n        ]\n    }\n}\n\nmosaic_response = requests.post(\n    f\"{RASTER_API_URL}/mosaic/register\",\n    json=search_body,\n).json()\nprint(json.dumps(mosaic_response, indent=1))\n\n{\n \"searchid\": \"7743bcb31bff7151aff7e5508785fce1\",\n \"links\": [\n  {\n   \"rel\": \"metadata\",\n   \"type\": \"application/json\",\n   \"href\": \"https://staging-raster.delta-backend.com/mosaic/7743bcb31bff7151aff7e5508785fce1/info\"\n  },\n  {\n   \"rel\": \"tilejson\",\n   \"type\": \"application/json\",\n   \"href\": \"https://staging-raster.delta-backend.com/mosaic/7743bcb31bff7151aff7e5508785fce1/tilejson.json\"\n  }\n ]\n}\n\n\n\n\n\nSee the raster-api/docs for more formatting options\n\n\n\n\nNote in the example below the band assets for HLS S30 are selected. The equivalent SWIR band assets for L30 are provided at the top of this notebook.\n\n# Set up format for Map API url\n# Get base url for tiler from the register mosaic request\ntiles_href = next(link[\"href\"] for link in mosaic_response[\"links\"] if link[\"rel\"]==\"tilejson\")\n\n# Add additional map formatting parameters to tiles url\ntilejson_response = requests.get(\n    tiles_href,\n    params={\n        # Info to add to the tilejson response\n        \"minzoom\": 6,\n        \"maxzoom\": 12,\n        \"post_process\": \"swir\",\n        \"assets\": s30_swir_assets\n    }\n).json()\nprint(json.dumps(tilejson_response, indent=1))\n\n{\n \"tilejson\": \"2.2.0\",\n \"name\": \"7743bcb31bff7151aff7e5508785fce1\",\n \"version\": \"1.0.0\",\n \"scheme\": \"xyz\",\n \"tiles\": [\n  \"https://staging-raster.delta-backend.com/mosaic/tiles/7743bcb31bff7151aff7e5508785fce1/WebMercatorQuad/{z}/{x}/{y}@1x?post_process=swir&assets=B12&assets=B8A&assets=B04\"\n ],\n \"minzoom\": 6,\n \"maxzoom\": 12,\n \"bounds\": [\n  -180.0,\n  -85.0511287798066,\n  180.0,\n  85.0511287798066\n ],\n \"center\": [\n  0.0,\n  0.0,\n  6\n ]\n}\n\n\n\n\n\n# Use bbox initial zoom and map\n# Set up a map located w/in event bounds\nzoom_start = 11\nm = Map(\n    tiles=\"OpenStreetMap\",\n    location=((ida_bbox[1] + ida_bbox[3]) / 2,(ida_bbox[0] + ida_bbox[2]) / 2),\n    zoom_start=zoom_start\n)\n\n# Add the formatted map layer\nmap_layer = TileLayer(\n    tiles=tilejson_response[\"tiles\"][0],\n    attr=\"Mosaic\",  \n)\nmap_layer.add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n\n\nThe titiler/raster-api supports user defined band combinations, band math expressions, rescaling, band index, resampling and more.\n\n# Set up format for Map API url\n# Get base url for tiler from the register mosaic request\ntiles_href = next(link[\"href\"] for link in mosaic_response[\"links\"] if link[\"rel\"]==\"tilejson\")\n\n# Add additional map formatting parameters to tiles url\ntilejson_response = requests.get(\n    tiles_href,\n    params={\n        # Info to add to the tilejson response\n        \"minzoom\": 6,\n        \"maxzoom\": 12,\n        \"assets\": s30_vegetation_index_assets,\n        \"expression\": s30_vegetation_index_expression,\n        \"rescale\": s30_vegetation_index_rescaling,\n        \"colormap_name\": s30_vegetation_index_colormap\n    }\n).json()\nprint(json.dumps(tilejson_response, indent=1))\n\n{\n \"tilejson\": \"2.2.0\",\n \"name\": \"7743bcb31bff7151aff7e5508785fce1\",\n \"version\": \"1.0.0\",\n \"scheme\": \"xyz\",\n \"tiles\": [\n  \"https://staging-raster.delta-backend.com/mosaic/tiles/7743bcb31bff7151aff7e5508785fce1/WebMercatorQuad/{z}/{x}/{y}@1x?assets=B08&assets=B04&expression=%28B08-B04%29%2F%28B08%2BB04%29&rescale=0%2C1&colormap_name=rdylgn\"\n ],\n \"minzoom\": 6,\n \"maxzoom\": 12,\n \"bounds\": [\n  -180.0,\n  -85.0511287798066,\n  180.0,\n  85.0511287798066\n ],\n \"center\": [\n  0.0,\n  0.0,\n  6\n ]\n}\n\n\n\n# Use bbox initial zoom and map\n# Set up a map located w/in event bounds\nzoom_start = 11\nm = Map(\n    tiles=\"OpenStreetMap\",\n    location=((ida_bbox[1] + ida_bbox[3]) / 2,(ida_bbox[0] + ida_bbox[2]) / 2),\n    zoom_start=zoom_start\n)\n\n# Add the formatted map layer\nmap_layer = TileLayer(\n    tiles=tilejson_response[\"tiles\"][0],\n    attr=\"Mosaic\",  \n)\nmap_layer.add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n\n\n\n\ncollections_filter = {\n    \"op\": \"=\", \n    \"args\" : [{ \"property\": \"collection\" }, l30_collection_id]\n}\n\nspatial_filter = {\n    \"op\": \"s_intersects\",\n    \"args\": [\n        {\"property\": \"bbox\"}, maria_bbox\n    ]\n}\n\ntemporal_filter = {\n    \"op\": \"t_intersects\",\n    \"args\": [\n        { \"property\": \"datetime\" },\n        { \"interval\" : maria_temporal_range }\n    ]\n}\n\n# Additional filters can be applied for other search criteria like <= maximum eo:cloud_cover in item properties\ncloud_filter = {\n    \"op\": \"<=\",\n    \"args\": [\n        {\"property\": \"eo:cloud_cover\"},\n        80\n    ]\n}\n\n# Specify cql2-json filter language in search body and add context for a summary of matched results\nsearch_body = {\n    \"filter-lang\": \"cql2-json\",\n    \"context\": \"on\",\n    \"filter\": {\n        \"op\": \"and\",\n        \"args\": [\n            collections_filter,\n            temporal_filter,\n            cloud_filter\n        ]\n    }\n}\n\n# Note this search body can also be used for a stac item search \nstac_items_response = requests.post(\n    f\"{STAC_API_URL}/search\",\n    json=search_body,\n).json()\n\n# Check how many items were matched in searc\nprint(\"search context:\", stac_items_response[\"context\"])\n\n# Iterate over search results to get an array of unique item datetimes\ndatetimes = []\nfeatures = stac_items_response[\"features\"]\ndatetimes += [item[\"properties\"][\"datetime\"] for item in features]\nnext_link = next((link for link in stac_items_response[\"links\"] if link[\"rel\"] == \"next\"), None)\nwhile next_link:\n    stac_items_response = requests.post(\n        f\"{STAC_API_URL}/search\",\n        json=next_link[\"body\"],\n    ).json()\n    features = stac_items_response[\"features\"]\n    datetimes += [item[\"properties\"][\"datetime\"] for item in features]\n    next_link = next((link for link in stac_items_response[\"links\"] if link[\"rel\"] == \"next\"), False)\n\nsorted(datetimes)\n\nsearch context: {'limit': 10, 'matched': 9, 'returned': 9}\n\n\n['2017-06-06T14:43:41.335694Z',\n '2017-06-22T14:43:47.156698Z',\n '2017-07-24T14:43:56.898518Z',\n '2017-08-09T14:44:03.584741Z',\n '2017-08-25T14:44:07.854507Z',\n '2017-09-26T14:44:14.813967Z',\n '2017-10-12T14:44:19.576858Z',\n '2017-11-13T14:44:17.834919Z',\n '2017-11-29T14:44:11.126689Z']\n\n\n\n# Restricted date range \nrestricted_temporal_filter = {\n    \"op\": \"t_intersects\",\n    \"args\": [\n        { \"property\": \"datetime\" },\n        { \"interval\" : [ \"2017-10-11T00:00:00Z\", \"2017-10-13T00:00:00Z\"] }\n    ]\n}\n\n# Specify cql2-json filter language in search body\nsearch_body = {\n    \"filter-lang\": \"cql2-json\",\n    \"filter\": {\n        \"op\": \"and\",\n        \"args\": [\n            collections_filter,\n            spatial_filter,\n            restricted_temporal_filter\n        ]\n    }\n}\n\nmosaic_response = requests.post(\n    f\"{RASTER_API_URL}/mosaic/register\",\n    json=search_body,\n).json()\n\n# Set up format for Map API url\n# Get base url for tiler from the register mosaic request\ntiles_href = next(link[\"href\"] for link in mosaic_response[\"links\"] if link[\"rel\"]==\"tilejson\")\n\n# Add additional map formatting parameters to tiles url\ntilejson_response = requests.get(\n    tiles_href,\n    params={\n        # Info to add to the tilejson response\n        \"minzoom\": 6,\n        \"maxzoom\": 12,\n        \"assets\": l30_ndwi_assets,\n        \"expression\": l30_ndwi_expression,\n        \"rescale\": l30_ndwi_rescaling,\n        \"colormap_name\": \"viridis\"\n    }\n).json()\n\n\n# Use bbox initial zoom and map\n# Set up a map located w/in event bounds\nzoom_start = 11\nm = Map(\n    tiles=\"OpenStreetMap\",\n    location=((maria_bbox[1] + maria_bbox[3]) / 2,(maria_bbox[0] + maria_bbox[2]) / 2),\n    zoom_start=zoom_start\n)\n\n# Add the formatted map layer\nmap_layer = TileLayer(\n    tiles=tilejson_response[\"tiles\"][0],\n    attr=\"Mosaic\",  \n)\nmap_layer.add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "example-notebooks/list-collections.html",
    "href": "example-notebooks/list-collections.html",
    "title": "List all collections",
    "section": "",
    "text": "from pystac_client import Client\n\n\nSTAC_API_URL = 'https://staging-stac.delta-backend.com/'\nclient = Client.open(STAC_API_URL)\n\n\nfor root, subcatalogs, items in client.walk():\n    # subcats represents any catalogs or collections owned by root\n    for cat in subcatalogs:\n        print(cat.title)\n\nnightlights-500m-daily\nsocial-vulnerability-index-household\nnightlights-hd-monthly\ngeoglam\ngrdi-vnl-raster\nsocial-vulnerability-index-housing-nopop\nsocial-vulnerability-index-household-nopop\nsocial-vulnerability-index-socioeconomic\nsocial-vulnerability-index-socioeconomic-nopop\ngrdi-filled-missing-values-count\nOMI_trno2-COG\nsocial-vulnerability-index-overall\nsocial-vulnerability-index-minority-nopop\ngrdi-cdr-raster\nMO_NPP_npp_vgpm\nno2-monthly-diff\nlis-tws-trend\nHLSL30.002\nsocial-vulnerability-index-overall-nopop\ngrdi-v1-raster\nIS2SITMOGR4-cog\nlis-tws-anomaly\nblue-tarp-planetscope\nsocial-vulnerability-index-housing\nblue-tarp-detection\ngrdi-shdi-raster\ngrdi-imr-raster\nhls-l30-002-ej\nno2-monthly\nnightlights-hd-1band\nsocial-vulnerability-index-minority\nnceo_africa_2017\nOMSO2PCA-COG\nHLSS30.002\nhls-s30-002-ej-reprocessed\ngrdi-v1-built\nhls-s30-002-ej\nhls-l30-002-ej-reprocessed\nfacebook_population_density\ngrdi-vnl-slope-raster"
  },
  {
    "objectID": "example-notebooks/index.html",
    "href": "example-notebooks/index.html",
    "title": "Example Notebooks",
    "section": "",
    "text": "To run the notebooks locally:\npip3 install -r requirements\njupyter notebook"
  }
]