---
title: APIs
subtitle: Application Programming Interfaces (APIs) provided by VEDA
---

Most of the VEDA APIs are hosted out of a single project ([veda-backend](https://github.com/NASA-IMPACT/veda-backend)) that combines multiple standalone services.


## Environments

While some of our services are already very mature, VEDA is currently in the build-up phase. Therefore, we do not yet have a production environment for users.
Maintenance on the staging environment will be announced internally and selected known stakeholders will be informed of any larger changes.

::: {.callout-note title="Base URL Changes"}
The VEDA Team is in the process of updating documentation notebooks to use the new stable production APIs. Currently most notebooks use deprecated staging APIs and should be updated:

**STAC_API_URL** = `"https://staging-stac.delta-backend.com"` --> `https://openveda.cloud/api/stac`

**RASTER_API_URL** = `"https://staging-raster.delta-backend.com"` --> `https://openveda.cloud/api/raster`
:::

::: {.callout-warning title="Breaking tiling endpoint changes"} 
VEDA tilers are being upgraded to titiler-pgstac v1 which better aligns with the stac-api spec and has many improvements but also introduces some breaking endpoint changes. The VEDA team will be updating notebooks for the new endpoints but, in the meantime, [the titiler-pgstac migration documentation](https://stac-utils.github.io/titiler-pgstac/latest/migrations/v1_migration/) provides support for using the new endpoints.
:::

### Production (stable):
* STAC browser: [veda-stac-browser](https://openveda.cloud)
* STAC API (metadata): [https://openveda.cloud/api/stac/docs](https://openveda.cloud/api/stac/docs)
* List collections: [https://openveda.cloud/api/stac/collections](https://openveda.cloud/api/stac/collections)
* Raster API (tiling): [https://openveda.cloud/api/raster/docs](https://openveda.cloud/api/raster/docs)

### Staging (maintenance will be announced):

* STAC browser: [staging.openveda.cloud](https://staging.openveda.cloud)
* STAC API (metadata): [staging.openveda.cloud/api/stac/docs](https://staging.openveda.cloud/api/stac/docs)
* List collections: [staging.openveda.cloud/api/stac/collections](https://staging.openveda.cloud/api/stac/collections)
* Raster API (map tiles and timeseries): [staging.openveda.cloud/api/raster/docs](https://staging.openveda.cloud/api/raster/docs)
* Features API (vector data): [firenrt.delta-backend.com](https://firenrt.delta-backend.com) - see also the [usage tutorial](../notebooks/tutorials/mapping-fires.html)
* STAC viewer (experimental): [staging.openveda.cloud/api/stac/index.html](https://staging.openveda.cloud/api/stac/index.html)


## Using tile layers in external services

### UI for single tile layers

As you can see from our API docs referenced above, our raster API provides [WMTS](https://www.ogc.org/standard/wmts/) and XYZ tiles for public consumption.

For any layer you are seeing in the VEDA dataset Explorer, you can retrieve the tile URL:

![VEDA Dashboard Exploration API grab](api-integration-wmts-xyz-from-exploration.png)

And paste that into any client that loads these tiles, like QGIS, ArcGIS, Leaflet, even online tools such as [geojson.io](https://geojson.io) or [felt.com](https://felt.com).

### STAC for layer timeseries

If you want to integrate tile layer time series into your application, you will need to fetch the information about
which time steps exist and what the layer URLs are from our Spatio Tempoeral Asset Catalog (STAC) API (see above).

That is because, unfortunately, neither XYZ nor WMTS have time series capabilities (unlike good old [WMS](https://www.ogc.org/standard/wms/), which our services do not provide, though).

You can see how to retrieve time steps and tile layer URLs from these tutorial Python notebooks (mostly REST API calls):

1. [Using /stac/tilejson.json with STAC collection and item IDs](../notebooks/datasets/ocean-npp-timeseries-analysis.html#visualizing-the-raster-imagery)
2. [Creating layers from filters and mosaics (advanced)](../notebooks/quickstarts/hls-visualization.html)

It comes down to querying for STAC items (timesteps) and then asking the Raster API for `tilejson.json` specifications for the items you are interested in.

Once you retrieved the WMTS or XYZ layer URLs this way, you can use them seamlessly with all mapping clients.
